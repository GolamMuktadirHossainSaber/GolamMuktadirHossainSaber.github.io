{"version":3,"sources":["images/info-emoji.svg","Components/LoginAuth/LoginModal.js","Pages/Login.js"],"names":["LoginModal","setLoggedInUser","useContext","UserContext","useState","showModal","setShowModal","newUser","setNewUser","useForm","registerSignIn","register","handleSignIn","handleSubmit","registerSignUp","handleSignUp","history","useHistory","useLocation","pathname","from","state","useEffect","googleSignIn","initializeLoginFramework","loading","toast","handleGoogleSignIn","then","res","dismiss","handleResponse","catch","err","error","message","onSubmit","data","name","email","password","createUserWithEmailAndPassword","signInWithEmailAndPassword","setJWTToken","replace","success","swal","title","content","icon","buttons","dangerMode","ok","handleSignOut","Modal","show","onHide","size","centered","Header","closeButton","Body","className","defaultValue","required","type","Button","variant","onClick","Login","setShow","Toast","onClose","delay","autohide","src","infoEmojis","alt"],"mappings":"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","file":"static/js/9.5eb54a78.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/info-emoji.91ce4204.svg\";","import swal from '@sweetalert/with-react';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { Button, Modal } from 'react-bootstrap';\r\nimport { useForm } from 'react-hook-form';\r\nimport toast from 'react-hot-toast';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { UserContext } from '../../App';\r\nimport { createUserWithEmailAndPassword, handleGoogleSignIn, handleSignOut, initializeLoginFramework, setJWTToken, signInWithEmailAndPassword } from './LoginManager';\r\nimport './LoginModal.css';\r\n\r\nconst LoginModal = () => {\r\n\r\n    const { setLoggedInUser } = useContext(UserContext);\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [newUser, setNewUser] = useState(false);\r\n\r\n    const { register: registerSignIn, handleSubmit: handleSignIn } = useForm();\r\n    const { register: registerSignUp, handleSubmit: handleSignUp } = useForm();\r\n\r\n    const history = useHistory();\r\n    const { pathname, ...location } = useLocation();\r\n    const { from } = location.state || { from: { pathname: \"/\" } }\r\n\r\n    useEffect(() => pathname === '/login' && setShowModal(true), [pathname]);\r\n\r\n    const googleSignIn = () => {\r\n        initializeLoginFramework();\r\n        const loading = toast.loading('Please wait...');\r\n        handleGoogleSignIn()\r\n            .then(res => {\r\n                toast.dismiss(loading);\r\n                handleResponse(res);\r\n            }).catch(err => {\r\n                toast.dismiss(loading);\r\n                toast.error(err.message)\r\n            });\r\n    }\r\n\r\n    const onSubmit = data => {\r\n        initializeLoginFramework();\r\n        const loading = toast.loading('Please wait...');\r\n        const { name, email, password } = data;\r\n\r\n        if (newUser && name && email && password) {\r\n            createUserWithEmailAndPassword(name, email, password)\r\n                .then(res => {\r\n                    res.name = name;\r\n                    toast.dismiss(loading);\r\n                    handleResponse(res);\r\n                }).catch(err => {\r\n                    toast.dismiss(loading);\r\n                    toast.error(err.message)\r\n                });\r\n        }\r\n\r\n        if (!newUser && email && password) {\r\n            signInWithEmailAndPassword(email, password)\r\n                .then(res => {\r\n                    toast.dismiss(loading);\r\n                    handleResponse(res);\r\n                }).catch(err => {\r\n                    toast.dismiss(loading);\r\n                    toast.error(err.message)\r\n                });\r\n        }\r\n    }\r\n\r\n    const handleResponse = (res) => {\r\n        setLoggedInUser(res);\r\n        setJWTToken();\r\n        setShowModal(false);\r\n        history.replace(from);\r\n        toast.success('Successfully Logged In!');\r\n        if (res.email === \"admin@admin.com\") {\r\n            swal({\r\n                title: \"Warning!\",\r\n                content: (\r\n                    <p>\r\n                        You have entered the admin panel for testing.\r\n                        <br />\r\n                        <b>Please do not abuse this facility!</b>\r\n                    </p>\r\n                ),\r\n                icon: \"warning\",\r\n                buttons: true,\r\n                dangerMode: true\r\n            }).then(ok => {\r\n                if (!ok) {\r\n                    handleSignOut()\r\n                        .then(res => {\r\n                            setLoggedInUser(res)\r\n                            toast.error('Logged Out!');\r\n                        })\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            show={showModal}\r\n            onHide={() => {\r\n                setShowModal(false);\r\n                history.replace({ pathname: \"/\" });\r\n            }}\r\n            size=\"lg\"\r\n            centered>\r\n            <Modal.Header closeButton />\r\n            <Modal.Body>\r\n                <div className={newUser ? \"cont s--signup\" : \"cont\"}>\r\n                    <div className=\"form sign-in\">\r\n                        <h2>Sign in</h2>\r\n                        <form onSubmit={handleSignIn(onSubmit)}>\r\n                            <label>\r\n                                <span>Email</span>\r\n                                <input defaultValue=\"admin@admin.com\" {...registerSignIn(\"email\", { required: true })} type=\"email\" />\r\n                            </label>\r\n                            <label>\r\n                                <span>Password</span>\r\n                                <input defaultValue=\"123456\" {...registerSignIn(\"password\", { required: true })} type=\"password\" />\r\n                            </label>\r\n                            <p className=\"forgot-pass\">Forgot password?</p>\r\n                            <Button type=\"submit\" variant='info' className=\"submit\">Sign In</Button>\r\n                            <button type=\"button\" onClick={googleSignIn} className=\"fb-btn\">Connect with <span>Google</span></button>\r\n                        </form>\r\n                    </div>\r\n                    <div className=\"sub-cont\">\r\n                        <div className=\"img\">\r\n                            <div className=\"img__text m--up\">\r\n                                <h2>New here?</h2>\r\n                                <p>Sign up and discover great amount of new opportunities!</p>\r\n                            </div>\r\n                            <div className=\"img__text m--in\">\r\n                                <h2>One of us?</h2>\r\n                                <p>If you already has an account, just sign in. We've missed you!</p>\r\n                            </div>\r\n                            <div onClick={() => setNewUser(!newUser)} className=\"img__btn\">\r\n                                <span className=\"m--up\">Sign Up</span>\r\n                                <span className=\"m--in\">Sign In</span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form sign-up\">\r\n                            <h2>Create Account</h2>\r\n                            <form onSubmit={handleSignUp(onSubmit)}>\r\n                                <label>\r\n                                    <span>Name</span>\r\n                                    <input {...registerSignUp(\"name\", { required: true })} type=\"text\" />\r\n                                </label>\r\n                                <label>\r\n                                    <span>Email</span>\r\n                                    <input {...registerSignUp(\"email\", { required: true })} type=\"email\" />\r\n                                </label>\r\n                                <label>\r\n                                    <span>Password</span>\r\n                                    <input {...registerSignUp(\"password\", { required: true })} type=\"password\" />\r\n                                </label>\r\n                                <Button type=\"submit\" variant='info' className=\"mt-5\">Sign Up</Button>\r\n                                <button type=\"button\" onClick={googleSignIn} className=\"fb-btn mt-3\" >Join with <span>Google</span></button>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Modal.Body>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default LoginModal;","import React, { useState } from 'react';\r\nimport { Toast } from 'react-bootstrap';\r\nimport LoginModal from '../Components/LoginAuth/LoginModal';\r\nimport infoEmojis from '../images/info-emoji.svg';\r\n\r\n\r\nconst Login = () => {\r\n    const [show, setShow] = useState(true);\r\n\r\n    return (\r\n       <section>\r\n            <Toast className=\"toast-left\" onClose={() => setShow(false)} show={show} delay={10000} autohide>\r\n                <Toast.Header>\r\n                    <img src={infoEmojis} className=\"rounded mr-2\" alt=\"Info\" />\r\n                    <strong className=\"mr-auto\">Important Info</strong>\r\n                </Toast.Header>\r\n                <Toast.Body className=\"text-center\">\r\n                    Use this account to <br /> Sign in as an admin to test the admin panel <br /> Or login with a different account as a user.\r\n                </Toast.Body>\r\n            </Toast>\r\n            <LoginModal />\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Login;"],"sourceRoot":""}